//*****************************************************************************
//   This partial class file has been autogenerated by an Objectivity tool.   
//   It provides all of the persistence support for the application class.    
//
//   Do not modify this file directly; instead, change persistence     
//   characteristics by opening and editing the *.pdd file   
//   using the Persistence Designer. 
//*****************************************************************************

namespace CarDesign.Model
{
  using System;
  using Objectivity.Db;
  using Objectivity.Db.Internal;
  using Objectivity.Db.Collections.Specialized;
  public partial class Car : ReferenceableObject
  {
    static Car() {}

    private static readonly SchemaClass _schemaClass = new SchemaClass("CarDesign.Model.Car", 1000006, 1001);

    #region Fields
    private static readonly SchemaAttribute _idField = new SchemaAttribute(_schemaClass, 2, "Id", AttributeKinds.UInt32);
    private static readonly SchemaAttribute _manufacturerField = new SchemaAttribute(_schemaClass, 3, "Manufacturer", AttributeKinds.String);
    private static readonly SchemaAttribute _modelField = new SchemaAttribute(_schemaClass, 4, "Model", AttributeKinds.String);
    private static readonly SchemaAttribute _yearField = new SchemaAttribute(_schemaClass, 5, "Year", AttributeKinds.UInt32);
    private static readonly SchemaAttribute _engineField = new SchemaAttribute(_schemaClass, 6, "Engine", AttributeKinds.Reference, 1000004);
    private static readonly SchemaAttribute _wheelsField = new SchemaAttribute(_schemaClass, 7, "Wheels", AttributeKinds.Reference | AttributeKinds.VariableArray, 1000003);
    #endregion Fields

    #region Constructors/Dispose

    protected Car(ObjectId id) : base(id) {}
    protected Car(PlacementConditions placementConditions, SchemaClass sc) : base(placementConditions, sc)
    {
    }


    protected override void Dispose(bool disposing)
    {
      if (disposing)
      {
        if (! Object.ReferenceEquals(_wheels_cache, null))
        {
          _wheels_cache.Dispose();
          _wheels_cache = null;
        }
      }
      base.Dispose(disposing);
    }

    #endregion Constructors/Dispose

    #region Helpers

    new public static Car CreateProxyForId(ObjectId id)
    {
      return new Car(id);
    }

    new public static int GetClassTypeNumber()
    {
      return _schemaClass.getShapeNumber();
    }


    public static void TieToFdSchema()
    {
      // Empty on purpose.
      // Via static constructor ensures all static schema fields are initialized.
    }

    #endregion Helpers

    #region Properties
    public uint Id
    {
      get {return GetUInt32Value(_idField);}
      set {SetUInt32Value(_idField, value);}
    }

    public string Manufacturer
    {
      get {return GetStringValue(_manufacturerField);}
      set {SetStringValue(_manufacturerField, value);}
    }

    public string Model
    {
      get {return GetStringValue(_modelField);}
      set {SetStringValue(_modelField, value);}
    }

    public uint Year
    {
      get {return GetUInt32Value(_yearField);}
      set {SetUInt32Value(_yearField, value);}
    }

    public Engine Engine
    {
      get {return (Engine) GetObject(_engineField);}
      set {SetObject(_engineField, value);}
    }

    private ReferenceArray<Wheel> _wheels_cache;
    public ReferenceArray<Wheel> Wheels
    {
      get
      {
        if (Object.ReferenceEquals(_wheels_cache, null))
        {
          _wheels_cache = ReferenceArray<Wheel>.createProxyInternal(this, _wheelsField);
        }
        return _wheels_cache;
      }
    }

    #endregion Properties
  }
}
