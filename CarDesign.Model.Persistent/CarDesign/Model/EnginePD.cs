//*****************************************************************************
//   This partial class file has been autogenerated by an Objectivity tool.   
//   It provides all of the persistence support for the application class.    
//
//   Do not modify this file directly; instead, change persistence     
//   characteristics by opening and editing the *.pdd file   
//   using the Persistence Designer. 
//*****************************************************************************

namespace CarDesign.Model
{
  using System;
  using Objectivity.Db;
  using Objectivity.Db.Internal;
  using Objectivity.Db.Collections.Specialized;
  public partial class Engine : ReferenceableObject
  {
    static Engine() {}

    private static readonly SchemaClass _schemaClass = new SchemaClass("CarDesign.Model.Engine", 1000004, 1001);

    #region Fields
    private static readonly SchemaAttribute _descriptionField = new SchemaAttribute(_schemaClass, 2, "Description", AttributeKinds.String);
    private static readonly SchemaAttribute _horsePowerField = new SchemaAttribute(_schemaClass, 3, "HorsePower", AttributeKinds.Float64);
    private static readonly SchemaAttribute _cylindersField = new SchemaAttribute(_schemaClass, 4, "Cylinders", AttributeKinds.Reference | AttributeKinds.VariableArray, 1000005);
    #endregion Fields

    #region Constructors/Dispose

    protected Engine(ObjectId id) : base(id) {}
    protected Engine(PlacementConditions placementConditions, SchemaClass sc) : base(placementConditions, sc)
    {
    }


    protected override void Dispose(bool disposing)
    {
      if (disposing)
      {
        if (! Object.ReferenceEquals(_cylinders_cache, null))
        {
          _cylinders_cache.Dispose();
          _cylinders_cache = null;
        }
      }
      base.Dispose(disposing);
    }

    #endregion Constructors/Dispose

    #region Helpers

    new public static Engine CreateProxyForId(ObjectId id)
    {
      return new Engine(id);
    }

    new public static int GetClassTypeNumber()
    {
      return _schemaClass.getShapeNumber();
    }


    public static void TieToFdSchema()
    {
      // Empty on purpose.
      // Via static constructor ensures all static schema fields are initialized.
    }

    #endregion Helpers

    #region Properties
    public string Description
    {
      get {return GetStringValue(_descriptionField);}
      set {SetStringValue(_descriptionField, value);}
    }

    public double HorsePower
    {
      get {return GetFloat64Value(_horsePowerField);}
      set {SetFloat64Value(_horsePowerField, value);}
    }

    private ReferenceArray<Cylinder> _cylinders_cache;
    public ReferenceArray<Cylinder> Cylinders
    {
      get
      {
        if (Object.ReferenceEquals(_cylinders_cache, null))
        {
          _cylinders_cache = ReferenceArray<Cylinder>.createProxyInternal(this, _cylindersField);
        }
        return _cylinders_cache;
      }
    }

    #endregion Properties
  }
}
